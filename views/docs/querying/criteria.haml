%h1 criteria

%p
  The following are a list of chainable criteria methods in mongoid along
  with their corresponding database operations. Note again that criteria
  are lazy evaluated, and with each chain it will be cloned and return a
  new criteria. For more information on the underlying database selectors
  please refer to
  <a href="http://www.mongodb.org/display/DOCS/Advanced+Queries">MongoDB</a>
  directly.

%h3 all_in

%p
  Adds a criterion that specifies valus that must all match in order to
  return results. The corresponding MongoDB operation is <tt>$all</tt>.

%mongoid mongoid
:coderay
  #!ruby
  # Match all people with Bond and 007 as aliases.
  Person.all_in(aliases: [ "Bond", "007" ])

%mongodb mongodb query selector
:coderay
  #!ruby
  { "aliases" : { "$all" : [ "Bond", "007" ] }}

%h3 also_in

%p
  Adds a criterion that specifies values where any value can be matched in
  order to return results. This is similar to <tt>Criteria#any_in</tt> with
  the exception here that if if it chained with values for the same field
  it performs a union of the values where <tt>any_in</tt> perform an
  intersection. The underlying MongoDB expression is <tt>$in</tt>.

%mongoid mongoid
:coderay
  #!ruby
  # Match all people with either Bond or 007 as aliases.
  Person.also_in(aliases: [ "Bond", "007" ])
  Person.any_in(aliases: [ "Bond" ]).also_in(aliases: [ "007" ])

%mongodb mongodb query selector
:coderay
  #!ruby
  { "aliases" : { "$in" : [ "Bond", "007" ] }}

%h3 and

%p
  Adds another simple expression that must match in order to return results.
  This is the same as <a href="#where">Criteria#where</a> and is mostly
  here for syntactic sugar.

%mongoid mongoid
:coderay
  #!ruby
  # Match all people with last name Jordan and first name starting with d.
  Person.where(last_name: "Jordan").and(first_name: /^d/i)

%mongodb mongodb query selector
:coderay
  #!ruby
  { "last_name" : "Jordan", "first_name" : /^d/i }

%h3 any_in

%p
  Adds a criterion that specifies values where any value can be matched in
  order to return results. This is similar to <tt>Criteria#also_in</tt> with
  the exception here that if if it chained with values for the same field
  it performs an intersection of the values where <tt>also_in</tt> perform a
  union. The underlying MongoDB expression is <tt>$in</tt>.

%mongoid mongoid
:coderay
  #!ruby
  # Match all people with either Bond or 007 as aliases.
  Person.any_in(aliases: [ "Bond", "007" ])
  Person.
    any_in(aliases: [ "Bond", "007", "James" ]).
    any_in(aliases: [ "Bond", "007" ])

%mongodb mongodb query selector
:coderay
  #!ruby
  { "aliases" : { "$in" : [ "Bond", "007" ] }}

%h3 any_of

%p
  Adds a criterion that specifies a set of expressions that any can match
  in order to return results. The underlying MongoDB expression is
  <tt>$or</tt>.

%mongoid mongoid
:coderay
  #!ruby
  # Match all people with either last name Penn or Teller
  Person.any_of({ last_name: "Penn" }, { last_name: "Teller" })

%mongodb mongodb query selector
:coderay
  #!ruby
  { "last_name" :
    { "$or" :
      [ { "last_name" : "Penn" }, { "last_name" : "Teller" } ]
    }
  }

%h3 near

%p
  Adds a criterion to find locations that are near the supplied
  coordinates. This performs a MongoDB <tt>$near</tt> selection and
  requires a 2d index to be on the provided field.

%mongoid mongoid
:coderay
  #!ruby
  # Match all bars near Berlin
  Bar.near(location: [ 52.30, 13.25 ])

%mongodb mongodb query selector
:coderay
  #!ruby
  { "location" : { "$near" : [ 52.30, 13.25 ] }}

%h3 where

%p
  Adds a criterion that must match in order to return results. If provided
  a string it interperets it as a javascript function and converts it to
  the proper <tt>$where</tt> clause. Mongoid also provides convenience
  methods on <tt>Symbol</tt> to make advanced queries simpler to write.

%mongoid mongoid
:coderay
  #!ruby
  # Match all people with first name Emmanuel
  Person.where(first_name: "Emmanuel")

  # Match all people with first name Emmanuel using Javascript.
  Person.where("this.first_name == 'Emmanuel'")

  # Match all people who live in Berlin, where address is embedded.
  Person.where("addresses.city" => "Berlin")

  # Example queries using symbol methods to perform more complex criteria.
  Person.where(:title.all => ["Sir"])
  Person.where(:age.exists => true)
  Person.where(:age.gt => 18)
  Person.where(:age.gte => 18)
  Person.where(:title.in => ["Sir", "Madam"])
  Person.where(:age.lt => 55)
  Person.where(:age.lte => 55)
  Person.where(:title.ne => "Mr")
  Person.where(:title.nin => ["Esquire"])
  Person.where(:aliases.size => 2)
  Person.where(:location.near => [ 22.50, -21.33 ])
  Person.where(:location.within => { "$center" => [ [ 50, -40 ], 1 ] })

%mongodb mongodb query selectors
:coderay
  #!ruby
  # Match all people with first name Emmanuel
  { "first_name" : "Emmanuel" }

  # Match all people with first name Emmanuel using Javascript.
  { "$where" : "this.first_name == 'Emmanuel'" }

  # Match all people who live in Berlin, where address is embedded.
  { "addresses.city" : "Berlin" }

  # Example queries using symbol methods to perform more complex criteria.
  { "title" : { "$all" : [ "Sir" ] } }
  { "age" : { "$exists" : true } }
  { "age" : { "$gt" : 18 } }
  { "age" : { "$gte" : 18 } }
  { "title" : { "$in" : [ "Sir", "Madam" ] } }
  { "age" : { "$lt" : 55 } }
  { "age" : { "$lte" : 55 } }
  { "title" : { "$ne" : "Mr" } }
  { "title" : { "$nin" : [ "Esquire" ] } }
  { "aliases" : { "$size" : 2 } }
  { "location" : { "$near" : [ 22.50, -21.33 ] } }
  { "location" : { "$within" : { "$center" => [ [ 50, -40 ], 1 ] } } }
