---
title: Extensions
author: Durran Jordan
category: docs
---
.title Fabrication
.text
  %p
    Paul Elliott's
    <a href="http://github.com/paulelliott/fabrication">Fabrication</a> gem is
    a slick object generation library. It support's Mongoid out of the box and
    provides a nice syntax for creating objects with ease for testing.

  %pre
    %code.language-ruby
      :preserve
        Fabricator(:person) do
          title "Grand Poobah"
          addresses(:count => 2) do |address, i|
            Fabricate(:address, :streeet => "\#{i} Bond St.")
          end
        end

.title mongoid-rspec
.text
  %p
    Evan Sagge's <a href="http://github.com/evansagge/mongoid-rspec">mongoid-rspec</a>
    provides RSpec matchers for Mongoid. Includes matchers for associations,
    options, validations, and fields.

  %pre
    %code.language-ruby
      :preserve
        describe Person do
          it { should reference_one :account }
          it { should reference_many :posts }
          it { should be_referenced_in :organization }

          it { should validate_presence_of(:name) }

          it { should have_field(:age).of_type(Integer) }
        end

        describe Address do
          it { should be_embedded_in(:person).as_inverse_of(:addresses) }
        end

.title Remarkable
.text
  %p
    Brian Cardarella's
    <a href="http://github.com/bcardarella/remarkable_mongoid">remarkable-mongoid</a>
    gem provides a nice addition of RSpec matchers for Mongoid. It contains
    the matchers shown below, plus all validation matchers from
    <a href="http://github.com/remarkable/remarkable/tree/master/remarkable_activemodel">
    Remarkable::ActiveModel</a>.

  %pre
    %code.language-ruby
      :preserve
        describe Person do

          it { should reference_one :account }
          it { should reference_many :posts }
          it { should be_referenced_in :organization }
          it { should embed_one :name }
          it { should embed_many :addresses }
          it { should be_embedded_in :group }

          it { should validate_uniqueness_of :dob }
        end

.title Riot
.text
  %p
    The <a href="http://github.com/thumblemonks/riot-mongoid">Riot-Mongoid</a>
    gem provides a nice addition of riot assertions for Mongoid. It contains
    assertions for fields, keys, associations, and validations.

  %pre
    %code.language-ruby
      :preserve
        context "Person Model" do
          setup { Person.new }

          asserts_topic.has_field :title,       :type => String

          asserts_topic.has_association :references_one, :account
          asserts_topic.has_association :embeds_many, :addresses

          asserts_topic.has_validation :validates_presence_of, :title
        end
