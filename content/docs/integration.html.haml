---
title: Integration
author: Durran Jordan
category: docs
---
.title Carrierwave
.text
  %p
    Support for Mongoid exists in
    <a href="http://github.com/jnicklas/carrierwave">Carrierwave</a>
    for doing file attachments, and you may specify them to be files or
    S3 currently. If no <tt>:mount_on</tt> option is provided to the uploader,
    the filename will get stored in a field with "_filename" appended
    to the name of the uploader.

  %pre
    %code.language-ruby
      :preserve
        class User
          include Mongoid::Document
          mount_uploader :avatar, AvatarUploader #field is avatar_filename
        end

.title Cucumber
.text
  %p
    Since MongoDB does not support transactions, you will want to add a
    hook to <a href="http://github.com/aslakhellesoy/cucumber">Cucumber</a>
    that ensures the database is clean before each feature.

  %p
    In <tt>features/support/hooks.rb</tt>:

  %pre
    %code.language-ruby
      :preserve
        Mongoid.master.collections.select do |collection|
          collection.name !~ /system/
        end.each(&:drop)

  %p
    If you are using the <tt><a href="http://github.com/bmabey/database_cleaner">database_cleaner</a></tt> gem,
    instead just create a file called <tt>features/support/database_cleaner.rb</tt> with the content:

  %pre
    %code.language-ruby
      :preserve
        require 'database_cleaner'
        DatabaseCleaner.strategy = :truncation
        DatabaseCleaner.orm = "mongoid"
        Before { DatabaseCleaner.clean }

.title RSpec
.text
  %p
    Similar to Cucumber, <a href="http://github.com/rspec">Rspec</a>'s
    <tt>use_transactional_fixtures</tt> option will have no affect on Mongoid,
    so you can clean up your specs after the suite.

  %p
    In <tt>spec/spec_helper.rb</tt>:

  %pre
    %code.language-ruby
      :preserve
        Rspec.configure do |config|
          config.after :suite do
            Mongoid.master.collections.select do |collection|
              collection.name !~ /system/
            end.each(&:drop)
          end
        end

  %p
    You may also do this after <tt>:each</tt> as well if you have a lot of
    integration spec, but note it will be slower.


  %p
    If you are using the <tt><a href="http://github.com/bmabey/database_cleaner">database_cleaner</a></tt> gem,
    you can instead add these lines to your RSpec configure block <tt>spec/spec_helper.rb</tt>:

  %pre
    %code.language-ruby
      :preserve
        Rspec.configure do |config|
          require 'database_cleaner'
          config.before(:suite) do
            DatabaseCleaner.strategy = :truncation
            DatabaseCleaner.orm = "mongoid"
          end

          config.before(:each) do
            DatabaseCleaner.clean
          end
        end

.title Devise
.text
  %p
    In order to get <a href="http://github.com/plataformatec/devise">Devise</a>
    set up to work with Mongoid, all you will need to do is remove the
    ActiveRecord require and replace it with the Mongoid one.

  %p
    In <tt>config/initializers/devise.rb</tt>:

  %pre
    %code.language-ruby
      :preserve
        # ==> ORM configuration
        # Load and configure the ORM. Supports :active_record (default),
        # :mongoid (bson_ext recommended) and :data_mapper (experimental).
        require "devise/orm/mongoid"

.title Passenger
.text
  %p
    The MongoDB wiki will alert you of an initializer that you need to include
    if you are using <a href="http://www.modrails.com/">Passenger</a>
    with smart spawning enabled. (Conservative spawning is the default.)
    In the case of Mongoid you will <i>NOT</i> need to do this as Mongoid detects
    if Passenger is running in this mode and will reconnect for you when
    a worker is forked.


.title Unicorn
.text
  %p
    No extra configuration is needed for Mongoid if you are using
    <a href="http://unicorn.bogomips.org/">Unicorn</a>
    with <tt>preload_app</tt> set to <tt>true</tt>. Mongoid will detect if
    Unicorn has forked a child worker and will reconnect to the database
    on the next query.
