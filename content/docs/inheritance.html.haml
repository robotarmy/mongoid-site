---
title: Inheritance
author: Durran Jordan
category: docs
---
.text
  As of <tt>0.11.0</tt> Mongoid supports inheritance of documents and embedded documents. Consider
  the following domain model:

  %br
  %pre
    %code.language-ruby
      :preserve
        class Canvas
          include Mongoid::Document
          field :name
          embeds_many :shapes

          def render
            shapes.each { |shape| shape.render }
          end
        end

        class Browser &lt; Canvas
          field :version, :type => Integer
        end

        class Firefox &lt; Browser
          field :useragent
        end

        class Shape
          include Mongoid::Document
          field :x, :type => Integer
          field :y, :type => Integer

          embedded_in :canvas, :inverse_of => :shapes

          def render
            #...
          end
        end

        class Circle &lt; Shape
          field :radius, :type => Float
        end

        class Rectangle &lt; Shape
          field :width, :type => Float
          field :height, :type => Float
        end

  In the above example, <tt>Canvas</tt>, <tt>Browser</tt> and <tt>Firefox</tt> will all
  save in the canvases collection. An additional attribute <tt>_type</tt> is stored in
  order to make sure when loaded from the database the correct document is returned. This
  also holds true for the embedded documents <tt>Circle</tt>, <tt>Rectangle</tt>, and
  <tt>Shape</tt>. Fields and validations are inherited down the hierachy, but not up. A
  subclass will contain all of its parent's fields and validations, but not vise-versa.

  %br
  %br
  .title Querying for Subclasses
  .text
    Querying for subclasses is handled in the normal manner, and although the documents
    are all in the same collection, queries will only return documents of the correct type,
    similar to Single Table Inheritance in ActiveRecord.

    %br
    %pre
      %code.language-ruby
        :preserve
          Canvas.where(:name => "Paper") # Returns Canvas documents and subclasses
          Firefox.where(:name => "Window 1") # Returns only Firefox documents

  %br
  .title Associations
  .text
    You can add any type of subclass to a has one or has many association, through either
    normal setting or through the <tt>build</tt> and <tt>create</tt> methods on the
    association:

    %br
    %pre
      %code.language-ruby
        :preserve
          firefox = Firefox.new
          firefox.shapes.build({ :x => 0, :y => 0 }) # Builds a Shape object
          firefox.shapes.build({ :x => 0, :y => 0 }, Circle) # Builds a Circle object
          firefox.shapes.create({ :x => 0, :y => 0 }, Rectangle) # Creates a Rectangle object

          rect = Rectangle.new(:width => 100, :height => 200)
          firefox.shapes << rect

