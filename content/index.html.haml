---
category: home
---

#main.left
  = render "shared/logo"

  %p.description Mongoid provides an elegant way to persist and query Ruby objects to documents in MongoDB.

  %hr
  .gems
    .gem
      %h3.fancy Mongoid 1.x for<br />Rails 2
      .install
        gem install mongoid

    .gem
      %h3.fancy Mongoid 2.x for<br />Rails 3
      .install
        gem install mongoid --pre

    .clear
  %hr

#sidebar.right

  %a#next_arrow.next.browse

  #slider_nav.navi
  #slider.scrollable
    .items.colorize
      .item.features
        .actions
          .next.browse Ok, Impress Me &raquo;

        %h3.fancy
          Features
        %ul
          %li Effortless mapping of Ruby objects to documents and embedded documents.
          %li Rails 3 compatibility including support for ActiveModel and Generators.
          %li Rich criteria API for document retrieval from the database.
          %li Named Scopes / Chainable criteria.
          %li Versioning of your data/documents.
          %li Full callback support on documents and embedded documents.
          %li Proper master/slave distribution against the database.
          %li Optimized for use with extremely large datasets.


      .item
        .actions
          .next.browse Ok, next! &raquo;

        %h3.fancy Map Ruby Objects to Mongo Docs
        %pre
          %code.language-ruby
            :preserve
              class Person
                include Mongoid::Document
                field :name
                embeds_many :phones
                references_many :addresses
                ...
              end

        %pre
          %code.language-ruby
            :preserve
              class Phone
                include Mongoid::Document
                ...
              end


      .item
        .actions
          .next.browse What else you got? &raquo;

        %h3.fancy Rich Criteria API
        %pre
          %code.language-ruby
            :preserve
              .all(:aliases => ["The Dude", ...])

              .and(:age.gt => 18)

              .excludes(:status => "Married")

              .in(:status => ["Single", "Divorced"])

              .where(:age.lte => 55)

      .item
        .actions
          .next.browse Dude! &raquo;

        %h3.fancy Chainable Criteria &amp; Named Scopes
        %pre
          %code.language-ruby
            :preserve
              Person
                .where(:last_name => "Zorg")
                .and(:middle_initial => "J")
                .and(:age.gt => 30)

        %pre
          %code.language-ruby
            :preserve
              class Player
                include Mongoid::Document
                field :status
                scope :inactive,
                      :where => { :active => false }
              end

      .item
        .actions
          .next.browse Wow! &raquo;

        %h3.fancy Dead Simple Versioning
        %pre
          %code.language-ruby
            :preserve
              class Person
                include Mongoid::Document
                include Mongoid::Versioning
                ...
              end

      .item
        .actions
          .next.browse Uh, huh &raquo;

        %h3.fancy Callbacks
        %pre
          %code.language-ruby
            :preserve
              class Person
                include Mongoid::Document
                before_create :do_something
                after_destroy :do_something_else
                ...
              end

      .item
        .actions
          .next.browse Sweet! &raquo;

        %h3.fancy Full Rails 3 Compatibility

        %pre
          %code.language-ruby
            :preserve
              >> rails generate mongoid:config
              # generates config/mongoid.yml

        %pre
          %code.language-ruby
            :preserve
              >> script/rails generate model
              # generates a mongoid model

      .item
        .actions
          .next.browse Ok, I'm sold &raquo;

        %h3.fancy Master/Slave support
        %pre
          %code.language-ruby
            :preserve
              # all reads go to slaves
              class Person
                include Mongoid::Document
                enslave
              end

        %pre
          %code.language-ruby
            :preserve
              # force a single query to use slaves
              .where(:name => "Durran").enslave

      .item.khaaaaaaan
        %h3.fancy Ghenghis Khan says...
        .quote{:style => "display:none"}
          Use Mongoid, <br />
          Fool!

        .khan

%script{:src => "/javascript/home.js"}

